sql,plan
"--
WITH

result AS (

    SELECT
        count()
    FROM hyperskill_private.users
    WHERE dictGetString(
              'hyperskill.alt_cities_country_dict',
              'name',
              toUInt64(country_by_ip_id)
          ) NOT IN ('Russia', 'Belarus')
        AND hypercoins > 100
        AND sub_premium_dts['created_at_min'] != toDateTime(0)
        AND user_id NOT IN (
            SELECT user_id FROM hyperskill.users_is_biased
        )

)

SELECT *
FROM result;",
"--
CREATE OR REPLACE VIEW hyperskill_reports.notifications_log
AS
WITH

user_data AS (

    SELECT
        user_id,
        groupArrayIf(
                map(
                    'email_notification_id',
                        extractURLParameter(page, 'notification_id'),
                    'website_notification_id',
                        JSONExtractString(frontend_context, 'id'),
                    'frontend_dt',
                        toString(frontend_dt),
                    'mobile_notification_id',
                        JSONExtractString(frontend_context, 'notification_id')
                ),
                (page LIKE '%utm_source=notifications_hs%') OR (page_part = 'notification')
        ) AS notifications_clicks,
        groupArrayIf(
            frontend_dt,
            (action = 'click')
                AND (page LIKE '%/learn%')
                AND (target = 'send')
        ) AS submissions_runs
    FROM hyperskill.content
    WHERE date >= toDate(toStartOfInterval(today(), toIntervalDay(35)))
        AND action IN ('view', 'click')
        AND platform IN ('web', 'iOS', 'Android')
    GROUP BY user_id
    HAVING notifications_clicks != []

),

user_activity_log AS (

    SELECT
        user_id,
        toInt64OrZero((arrayJoin(notifications_clicks) AS click_data)['email_notification_id']) AS email_notification_id,
        toInt64OrZero(click_data['website_notification_id']) AS website_notification_id,
        toInt64OrZero(click_data['mobile_notification_id']) AS mobile_notification_id,
        multiIf(
            website_notification_id > 0, website_notification_id,
            email_notification_id > 0, email_notification_id,
            mobile_notification_id > 0, mobile_notification_id,
            0
        ) AS notification_id,
        toDateTime(
            if(
                email_notification_id = notification_id, click_data['frontend_dt'] AS click_dt,
                '1970-01-01 00:00:00'
            )
        ) AS email_click_dt,
        toDateTime(
            if(
                website_notification_id = notification_id, click_dt,
                '1970-01-01 00:00:00'
            )
        ) AS website_click_dt,
        toDateTime(
            if(
                mobile_notification_id = notification_id, click_dt,
                '1970-01-01 00:00:00'
            )
        ) AS app_click_dt,
        arrayJoin(submissions_runs) AS submission_dt
    FROM user_data
    WHERE notification_id != 0

),

notification_templates AS (

    SELECT
        id,
        channel,
        name,
        trigger
    FROM hyperskill_mariadb.notifications_templatenotification
    WHERE enabled = 1
        AND deleted_at IS NULL

),

result AS (

    SELECT
        time,
        toDate(time) AS cohort_day,
        toMonday(time) AS cohort_week,
        toDate(toStartOfInterval(time, toIntervalDay(28))) AS cohort_28d,
        notifications.user_id AS user_id,
        notifications.id AS notification_id,
        multiIf(
            (notification_templates.channel AS ch) = 0, 'web',
            ch = 1, 'email',
            ch = 2, 'mobile',
            ch = 3, 'web_and_mobile',
            'Bug! Please, report in slack #data!'
        ) AS channel,
        notification_templates.name AS notification_type,
        status AS is_opened,
        website_click_dt,
        email_click_dt,
        app_click_dt,
        submission_dt,
        is_sent_email,
        email_first_read_at
    FROM hyperskill_mariadb.notifications_notification AS notifications

    LEFT JOIN user_activity_log ON (user_activity_log.notification_id, user_activity_log.user_id) = (notifications.id, notifications.user_id)

    LEFT JOIN notification_templates ON notification_templates.id = notifications.template_id

    WHERE time >= toDate(toStartOfInterval(today(), toIntervalDay(35)))
        AND user_id NOT IN (
            SELECT user_id
            FROM hyperskill.users_is_biased
        )

)

SELECT *
FROM result",
"--
WITH

result AS (

    SELECT
        multiIf(
            selected_track_id = 18, 'kotlin_core',
            selected_track_id = 15, 'java_core',
            selected_track_id = 2, 'python_core',
            'other'
        ) AS track,
        registration_date AS cohort,
        countIf(
            action, action = 'completed_step'
                AND date = registration_date + 1
        ) / uniqExact(user_id) AS metric
    FROM hyperskill.content
    WHERE date BETWEEN toDate('2023-09-18') - 14 AND toDate('2023-09-18') + 7
        AND registration_date BETWEEN toDate('2023-09-18') - 14 AND toDate('2023-09-18') + 7
        AND action IN ('view', 'completed_step')
        AND track_id != 0
        AND is_biased = 0
        AND is_guest = 0
        AND is_superuser = 0
    GROUP BY cohort, track
    ORDER BY cohort

)

SELECT *
FROM result;",
"-- The number of user interactions with different elements on the theory and practice screens.

-- in the theory tab:
--
-- Comments
-- Hints
-- User links
-- Show discussion
WITH

theories AS (

    SELECT
        step_id,
        topic_id
    FROM hyperskill.stg_steps
    WHERE step_type = 'text'

),

actions_stat_on_theory AS (

    SELECT
        uniqExact(user_id)                               AS visited_users,
        uniqExactIf(user_id, target = 'comment')         AS comment_click_users,
        uniqExactIf(user_id, target = 'useful_link')     AS useful_link_click_users,
        uniqExactIf(user_id, target = 'show_discussion') AS show_discussion_click_users,
        comment_click_users / visited_users              AS comment_click_rate,
        useful_link_click_users / visited_users          AS useful_link_click_rate,
        show_discussion_click_users / visited_users      AS show_discussion_click_rate
    FROM hyperskill.content
    WHERE date >= today() - interval 6 month
        AND action IN ('click')
        AND splitByChar('#', splitByChar('/', page)[4])[1] IN (SELECT step_id FROM theories)

),

objects_stat_on_theory AS (

    SELECT
        round(avg(comment_click_rate), 3)         AS avg_comment_click_rate,
        round(avg(useful_link_click_rate), 3)     AS avg_useful_link_click_rate,
        round(avg(show_discussion_click_rate), 3) AS avg_show_discussion_click_rate
    FROM actions_stat_on_theory

)

SELECT *
FROM objects_stat_on_theory;

-- in the practice tab:
--
-- See hint
-- Report a typo (это не кнопка)
-- Comments
-- Hints
-- User links
-- Solution (есть только в кодовых задачах)
-- Show discussion
WITH

problems AS (

    SELECT
        step_id,
        topic_id
    FROM hyperskill.stg_steps
    WHERE step_type != 'text'
        AND topic_id > 0

),

actions_stat_on_problems AS (

    SELECT
        uniqExact(user_id)                               AS visited_users,
        uniqExactIf(user_id, target = 'comment')         AS comment_click_users,
        uniqExactIf(user_id, target = 'useful_link')     AS useful_link_click_users,
        uniqExactIf(user_id, target = 'show_discussion') AS show_discussion_click_users,
        uniqExactIf(user_id, target = 'solutions')       AS solutions_click_users,
        uniqExactIf(user_id, target = 'hint')            AS comments_hint_click_users,
        uniqExactIf(user_id, target = 'see_hint')        AS see_hint_click_users,
        comment_click_users / visited_users              AS comment_click_rate,
        useful_link_click_users / visited_users          AS useful_link_click_rate,
        show_discussion_click_users / visited_users      AS show_discussion_click_rate,
        solutions_click_users / visited_users            AS solutions_click_rate,
        comments_hint_click_users / visited_users        AS comments_hint_click_rate,
        see_hint_click_users / visited_users             AS see_hint_click_rate
    FROM hyperskill.content
    WHERE date >= today() - interval 6 month
        AND action IN ('click')
        AND splitByChar('#', splitByChar('/', page)[4])[1] IN (
            SELECT step_id FROM problems)
),

objects_stat_on_problems AS (

    SELECT
        round(avg(comment_click_rate), 3)         AS avg_comment_click_rate,
        round(avg(useful_link_click_rate), 3)     AS avg_useful_link_click_rate,
        round(avg(show_discussion_click_rate), 3) AS avg_show_discussion_click_rate,
        round(avg(solutions_click_rate), 3)       AS avg_solutions_click_rate,
        round(avg(comments_hint_click_rate), 3)   AS avg_comments_hint_click_rate,
        round(avg(see_hint_click_rate), 3)        AS avg_see_hint_click_rate

    FROM actions_stat_on_problems

)

SELECT *
FROM objects_stat_on_problems;
",
"--
WITH

filtered_users AS (

    SELECT user_id
    FROM hyperskill_private.users
    WHERE is_biased = 0  -- Not staff
      AND is_superuser = 0  -- and not superusers
      AND user_id NOT IN (SELECT user_id FROM hyperskill.users_is_biased)  -- additional filter for users_is_biased
      AND is_testee = 1  -- agree to be a testee
      AND dictGetString(
              'hyperskill.alt_cities_country_dict',
              'name',
              toUInt64(country_by_ip_id)
          ) NOT IN ('Russia', 'Ukraine', 'Belarus')
      AND sub_personal_str_map['ownerCountry'] NOT IN ('RU', 'UA', 'BY')  -- b) Not from Russia, Ukraine, Belarus
      AND date_registered >= '2023-06-01'  -- Registered since 2023-06-01

),

talg AS (
    -- get ""tell about your level and goal"" poll data
    SELECT
        user_id
    FROM hyperskill.polls
    WHERE poll_id = 4
        AND question_1 IN ('1', '2')

),

users AS (

    SELECT
        user_id,
        dictGetString('hyperskill_private.users_dict', 'email', toUInt64(user_id)) AS email
    FROM hyperskill.content

    WHERE action = 'completed_step'
      AND user_id IN (SELECT user_id FROM filtered_users)

    GROUP BY user_id
    HAVING countIf(date, action = 'completed_step' AND step_type <> 'text'
        AND date BETWEEN today() - 62 + 1 AND today() - 1) > 0
        AND countIf(date, selected_track_id IN (2, 6, 11, 28, 29, 30, 54, 44, 58, 59, 79, 62)) > 0 -- learning / having learned on Python tracks

)

SELECT
    user_id,
    email
FROM users;",
"WITH 16 AS retention_depth
SELECT
    week_number,
    toDate(week_number) AS week_number_date,
    user_id,
    segment,
    retention,
    retentions
FROM (
    SELECT
        user_id,
        dictGetString(
            'hyperskill_reports.users_first_platform_last_185_d__dict',
            'first_platform',
            toUInt64(user_id)
        ) AS first_platform,
        toDate(
            dictGetDateTime(
                'hyperskill_reports.users_mobile_apps_first_login__dict',
                'first_login_dt',
                toUInt64(user_id)
            )
        ) AS first_login_date,
        toDate(
            dictGetDateTime(
                'hyperskill_private.users_dict',
                'date_registered',
                toUInt64(user_id)
            )
        ) AS registration_date,
        multiIf(
            first_platform IN ('iOS', 'Android'),
                'Registered via app',
            (first_login_date - toDate(registration_date) AS days_from_registration) <= 3,
                '[0-3] days old',
            days_from_registration > 3 AND days_from_registration <= 7,
                '(3-7] days old',
            days_from_registration > 7 AND days_from_registration <= 30,
                '(7-30] days old',
            days_from_registration > 30 AND days_from_registration <= 90,
                '(30-90] days old', '91+ days old'
        ) AS segment,
        retention(
            (date >= first_login_date) AND (date <= (first_login_date + 7)),
            (action IN ('completed_submission', 'failed_submission',
                        'rejected_submission'))
                AND ((date >= (first_login_date + 8))
                AND (date <= (first_login_date + 14))),
            (action IN ('completed_submission', 'failed_submission',
                        'rejected_submission'))
                AND ((date >= (first_login_date + 15))
                AND (date <= (first_login_date + 21))),
            (action IN ('completed_submission', 'failed_submission',
                        'rejected_submission'))
                AND ((date >= (first_login_date + 22))
                AND (date <= (first_login_date + 28))),
            (action IN ('completed_submission', 'failed_submission',
                        'rejected_submission'))
                AND ((date >= (first_login_date + 29))
                AND (date <= (first_login_date + 35))),
            (action IN ('completed_submission', 'failed_submission',
                        'rejected_submission'))
                AND ((date >= (first_login_date + 36))
                AND (date <= (first_login_date + 42))),
            (action IN ('completed_submission', 'failed_submission',
                        'rejected_submission'))
                AND ((date >= (first_login_date + 43))
                AND (date <= (first_login_date + 49))),
            (action IN ('completed_submission', 'failed_submission',
                        'rejected_submission'))
                AND ((date >= (first_login_date + 50))
                AND (date <= (first_login_date + 56))),
            (action IN ('completed_submission', 'failed_submission',
                        'rejected_submission'))
                AND ((date >= (first_login_date + 57))
                AND (date <= (first_login_date + 63))),
            (action IN ('completed_submission', 'failed_submission',
                        'rejected_submission'))
                AND ((date >= (first_login_date + 64))
                AND (date <= (first_login_date + 70))),
            (action IN ('completed_submission', 'failed_submission',
                        'rejected_submission'))
                AND ((date >= (first_login_date + 71))
                AND (date <= (first_login_date + 77))),
            (action IN ('completed_submission', 'failed_submission',
                        'rejected_submission'))
                AND ((date >= (first_login_date + 78))
                AND (date <= (first_login_date + 84))),
            (action IN ('completed_submission', 'failed_submission',
                        'rejected_submission'))
                AND ((date >= (first_login_date + 85))
                AND (date <= (first_login_date + 91))),
            (action IN ('completed_submission', 'failed_submission',
                        'rejected_submission'))
                AND ((date >= (first_login_date + 92))
                AND (date <= (first_login_date + 98))),
            (action IN ('completed_submission', 'failed_submission',
                        'rejected_submission'))
                AND ((date >= (first_login_date + 99))
                AND (date <= (first_login_date + 105))),
            (action IN ('completed_submission', 'failed_submission',
                        'rejected_submission'))
                AND ((date >= (first_login_date + 106))
                AND (date <= (first_login_date + 112)))
        ) AS retentions
    FROM hyperskill.content
    WHERE date >= today() - toIntervalDay(28 * 6)
        AND date < today()
        AND platform IN ('Android', 'iOS')
        AND is_guest = 0
        AND first_login_date >= today() - toIntervalDay(28 * 6)
        AND first_login_date <= today() - 7 - 1
        AND action IN (
            'view', 'logged_in_user', 'registered_user', 'completed_submission',
            'failed_submission', 'rejected_submission'
        )
        AND step_type != 'text'
        AND user_id NOT IN (
            SELECT user_id
            FROM hyperskill.users_is_biased
        )
        AND first_login_date > toDate(0)
    GROUP BY user_id
) AS content_data
ARRAY JOIN
    retentions AS retention,
    range(retention_depth) AS week_number;",
"-- https://vyahhi.myjetbrains.com/youtrack/issue/AN-1818/Q3-2023-OKR-dashboard-for-Habit-team
CREATE OR REPLACE VIEW hyperskill_reports.habit_in_week_activity
AS
WITH

user_data AS (

    SELECT
        toMonday(date) AS week,
        user_id,
        uniqExact(date) AS active_days
    FROM hyperskill.content
    WHERE date >= toMonday(today() - 28 * 7)
        AND date < toMonday(today())
        AND action = 'completed_submission'
    GROUP BY week, user_id

),

agg AS (

    SELECT
        week,
        avg(active_days) AS avg_active_days
    FROM user_data
    GROUP BY week

)

SELECT *
FROM agg;

-- Percentage of yesterday’s active users who are NOT active today
CREATE OR REPLACE VIEW hyperskill_reports.habit_churn
AS
WITH

today() - 28 * 8 AS start_from,

user_data AS (

    SELECT
        user_id,
        groupUniqArray(date) AS dates,
        dictGetDateTime(
            'hyperskill_private.users_dict', 'date_registered', toUInt64(user_id)
        ) AS registration_date
    FROM hyperskill.content
    WHERE date >= start_from
        AND action = 'completed_submission'
        AND registration_date >= start_from
    GROUP BY user_id

),

agg AS (

    SELECT
        arrayJoin(
            arrayMap(
                i -> today() - toIntervalDay(i),
                range(1, 28 * 7)
            )
        ) AS period,
        uniqExactIf(
            user_id,
            (arrayExists(
                date -> date = period - 1,
                dates
            ) AS was_active_previous_day)
        ) AS previous_period_active_users,
        uniqExactIf(
            user_id,
            was_active_previous_day
                AND (
                    arrayExists(
                        date -> date = period,
                        dates
                    ) AS is_active_during_period
                )
        ) AS current_period_active_users_from_previous_period
    FROM user_data
    WHERE period - toDate(registration_date) > 3
    GROUP BY period

),

result AS (

    SELECT
        period,
        previous_period_active_users,
        current_period_active_users_from_previous_period,
        (previous_period_active_users
             - current_period_active_users_from_previous_period)
            / previous_period_active_users AS churn
    FROM agg

)

SELECT *
FROM result;


-- Percentage of yesterday’s active users who are NOT active today
CREATE OR REPLACE VIEW hyperskill_reports.habit_churn_segmented
AS
WITH

today() - 28 * 8 AS start_from,

user_data AS (

    SELECT
        user_id,
        groupUniqArray(date) AS dates,
        dictGetDateTime(
            'hyperskill_private.users_dict', 'date_registered', toUInt64(user_id)
        ) AS registration_date
    FROM hyperskill.content
    WHERE date >= start_from
        AND action = 'completed_submission'
        AND registration_date >= start_from
    GROUP BY user_id

),

agg AS (

    SELECT
        arrayJoin(
            arrayMap(
                i -> today() - toIntervalDay(i),
                range(1, 28 * 7)
            )
        ) AS period,
        multiIf(
            (period - toDate(registration_date) AS days_from_registration) <= 3,
            '[0-3] days old',
            days_from_registration > 3 AND days_from_registration <= 7,
            '(3-7] days old',
            days_from_registration > 7 AND days_from_registration <= 30,
            '(7-30] days old',
            days_from_registration > 30 AND days_from_registration <= 90,
            '(30-90] days old',
            '91+ days old'
        ) AS segment,
        uniqExactIf(
            user_id,
            (arrayExists(
                date -> date = period - 1,
                dates
            ) AS was_active_previous_day)
        ) AS previous_period_active_users,
        uniqExactIf(
            user_id,
            was_active_previous_day
                AND (
                    arrayExists(
                        date -> date = period,
                        dates
                    ) AS is_active_during_period
                )
        ) AS current_period_active_users_from_previous_period
    FROM user_data
    GROUP BY period, segment

),

result AS (

    SELECT
        period,
        segment,
        previous_period_active_users,
        current_period_active_users_from_previous_period,
        (previous_period_active_users
             - current_period_active_users_from_previous_period)
            / previous_period_active_users AS churn
    FROM agg

)

SELECT *
FROM result;
",
"--
WITH

segment AS (

    SELECT
        email,
        date_registered,
        hypercoins
    FROM hyperskill_private.users
    WHERE user_id NOT IN (SELECT * FROM hyperskill.users_is_biased)
        AND (dictGetString('hyperskill.alt_cities_country_dict', 'name', toUInt64(country_by_ip_id)) AS country)
            NOT IN ('Russia', 'Belarus')
    ORDER BY hypercoins DESC
    LIMIT 20000

)

SELECT *
FROM segment;",
"-- https://vyahhi.myjetbrains.com/youtrack/issue/AN-1818/Q3-2023-OKR-dashboard-for-Habit-team
CREATE OR REPLACE VIEW hyperskill_reports.habit_in_week_activity
AS
WITH

user_data AS (

    SELECT
        toMonday(date) AS week,
        user_id,
        uniqExact(date) AS active_days
    FROM hyperskill.content
    WHERE date >= toMonday(today() - 28 * 7)
        AND date < toMonday(today())
        AND action = 'completed_submission'
    GROUP BY week, user_id

),

agg AS (

    SELECT
        week,
        avg(active_days) AS avg_active_days
    FROM user_data
    GROUP BY week

)

SELECT *
FROM agg;

-- Percentage of yesterday’s active users who are NOT active today
CREATE OR REPLACE VIEW hyperskill_reports.habit_churn
AS
WITH

today() - 28 * 8 AS start_from,

user_data AS (

    SELECT
        user_id,
        groupUniqArray(date) AS dates
    FROM hyperskill.content
    WHERE date >= start_from
        AND action = 'completed_submission'
        AND dictGetDateTime(
            'hyperskill_private.users_dict', 'date_registered', toUInt64(user_id)
        ) >= start_from
    GROUP BY user_id

),

agg AS (

    SELECT
        arrayJoin(
            arrayMap(
                i -> today() - toIntervalDay(i),
                range(1, 28 * 7)
            )
        ) AS period,
        uniqExactIf(
            user_id,
            (arrayExists(
                date -> date = period - 1,
                dates
            ) AS was_active_previous_day)
        ) AS previous_period_active_users,
        uniqExactIf(
            user_id,
            was_active_previous_day
                AND (
                    arrayExists(
                        date -> date = period,
                        dates
                    ) AS is_active_during_period
                )
        ) AS current_period_active_users_from_previous_period
    FROM user_data
    GROUP BY period

),

result AS (

    SELECT
        period,
        previous_period_active_users,
        current_period_active_users_from_previous_period,
        (previous_period_active_users
             - current_period_active_users_from_previous_period)
            / previous_period_active_users AS churn
    FROM agg

)

SELECT *
FROM result;",
"-- dict
-- create mautic leads dict view
CREATE VIEW IF NOT EXISTS hyperskill_reports.mautic_leads
AS
SELECT DISTINCT
    id,
    hs_id
FROM hyperskill_mautic.leads
WHERE date_added > today() - 185;

-- create mautic leads dict
DROP DICTIONARY IF EXISTS hyperskill_reports.mautic_leads_dict;
CREATE DICTIONARY IF NOT EXISTS hyperskill_reports.mautic_leads_dict
    (
    `id` Int64,
    `hs_id` Int64
    )
    PRIMARY KEY id
    SOURCE(
        CLICKHOUSE(
            HOST 'localhost'
            PORT 9000
            USER 'hyperskill_readonly'
            PASSWORD 'a7klZE43bP3XqVE4'
            DB 'hyperskill_reports'
            TABLE 'mautic_leads'
        )
    )
    LIFETIME(MIN 3600 MAX 86400)
    LAYOUT(HASHED(PREALLOCATE 0));

-- check dict
SELECT
    id,
    hs_id
FROM hyperskill_reports.mautic_leads_dict;

-- query
WITH

map(
    'day0', 530,
    'day1', 525,
    'day2', 526,
    'day3', 527,
    'day4', 528,
    'day5', 529
) AS email_map,
'day0' AS filter_value,  -- '{{ ''.join(filter_values('values')) }}'
1 AS product_months_ago,

events AS (

    SELECT
        user_id,
        dictGetDateTime(
            'hyperskill_private.users_dict', 'date_registered', toUInt64(user_id)
        ) AS date_registered,
        action,
        assumeNotNull(solving_context) AS context
    FROM hyperskill.content
    WHERE date >= toMonday(today() - 28 * product_months_ago)
        AND action IN ('view', 'completed_step', 'completed_topic')
        AND date_registered >= toMonday(today() - 28 * product_months_ago)

    UNION ALL

    SELECT
        dictGetInt64(
                'hyperskill_reports.mautic_leads_dict', 'hs_id', toUInt64(lead_id)
            ) AS user_id,
        dictGetDateTime(
            'hyperskill_private.users_dict', 'date_registered', toUInt64(user_id)
        ) AS date_registered,
        'sent_or_read_email' AS action,
        assumeNotNull(toString(date_sent) || ',' || toString(date_read)) AS context
    FROM hyperskill_mautic.email_stats
    WHERE date_sent >= toMonday(today() - 28 * product_months_ago)
        AND date_registered >= toMonday(today() - 28 * product_months_ago)
        AND email_id IN (email_map[filter_value])

    UNION ALL

    SELECT
        dictGetInt64(
            'hyperskill_reports.mautic_leads_dict', 'hs_id', toUInt64(lead_id)
        ) AS user_id,
        dictGetDateTime(
            'hyperskill_private.users_dict', 'date_registered', toUInt64(user_id)
        ) AS date_registered,
        'hit_page' AS action,
        assumeNotNull('') AS context
    FROM hyperskill_mautic.page_hits
    WHERE date_hit >= toMonday(today() - 28 * product_months_ago)
        AND date_registered >= toMonday(today() - 28 * product_months_ago)
        AND email_id IN (email_map[filter_value])

),

conversions_data AS (

    SELECT
        user_id,
        dictGetDateTime(
            'hyperskill_private.users_dict', 'date_registered', toUInt64(user_id)
        ) AS date_registered,
        retention(
            1 = 1,
            action = 'sent_or_read_email'
                AND toDateTime(splitByChar(',', context)[1]) > toMonday(today() - 28 * product_months_ago),
            action = 'sent_or_read_email'
                AND toDateTime(splitByChar(',', context)[2]) > toMonday(today() - 28 * product_months_ago),
            action = 'hit_page',
            action = 'completed_step' AND context IN ('', 'default'),
            action = 'completed_topic' AND context IN ('by_steps', 'default')
        ) AS conversions
    FROM events
    GROUP BY user_id

),

funnel AS (

    SELECT
        toMonday(date_registered) AS week_cohort,
        sum(conversions[1]) AS users,
        sum(conversions[2]) AS sent_emails,
        sumIf(conversions[3], conversions[2]) / sent_emails AS read_emails,
        sumIf(conversions[4], conversions[3]) / sent_emails AS hit_page,
        sumIf(conversions[5], conversions[4]) / sent_emails AS completed_step_in_topic,
        sumIf(
            conversions[6], conversions[4] AND conversions[4]
        ) / sent_emails AS completed_topic_by_steps
    FROM conversions_data
    GROUP BY week_cohort

)

SELECT *
FROM funnel
ORDER BY week_cohort DESC;",
"-- https://vyahhi.myjetbrains.com/youtrack/issue/AN-1261

DROP VIEW IF EXISTS hyperskill_reports.learning_users__view;
--
CREATE OR REPLACE VIEW hyperskill_reports.learning_users
AS
SELECT
    date,
    user_id,
    multiIf(
        subscription_type = 'personal', 'Personal',
        subscription_type IN ('team member', 'commercial'), 'Team Member',
        subscription_type = 'freemium', 'Freemium',
        subscription_type = 'premium', 'Premium',
        'Other'
        ) AS user_type
FROM hyperskill.content
WHERE date BETWEEN today() - 28 * 6 AND today() - 1
  AND user_id NOT IN (SELECT user_id FROM hyperskill.users_is_biased)
  AND action IN ('failed_submission', 'completed_submission', 'rejected_submission')
  AND step_type != 'text';


DROP VIEW IF EXISTS hyperskill_reports.daily_learning_users__view;
CREATE OR REPLACE VIEW hyperskill_reports.daily_learning_users
AS
SELECT
    date,
    user_type,
    uniqExact(user_id) AS users
FROM hyperskill_reports.learning_users
GROUP BY date, user_type;
",
"--
WITH

subs_data As (

    SELECT
        user_id,
        date_registered,
        if(
            isNull(sub_personal_dts['created_at_min']),
                sub_premium_dts['created_at_min'],
            sub_personal_dts['created_at_min']
        ) AS created_at_min,
        (created_at_min - date_registered) / (3600 * 24) AS days_to_subscribe
    FROM hyperskill_private.users
    WHERE (
        sub_personal_dts != '{}'
            OR sub_premium_dts != '{}'
        )
        AND date_registered > today() - 185
        AND days_to_subscribe >= -1

),

stats AS (

    SELECT quantiles(.25, .5, .75, .9, .99)(days_to_subscribe) AS quantiles
    FROM subs_data

)

-- make output and col names more human readable
SELECT
    round(quantiles[1], 2) AS q_25_days,
    round(quantiles[2], 2) AS q_50_days,
    round(quantiles[3], 2) AS q_75_days,
    round(quantiles[4], 2) AS q_90_days,
    round(quantiles[5], 2) AS q_99_days
FROM stats;",
"--
WITH

target_users as (
    -- users who have completed at least 1 `dailystep` during the ""hour of code""
    SELECT user_id
    FROM hyperskill_mariadb.steps_dailystep
    WHERE state = 1
      AND day BETWEEN '2022-12-05' AND '2022-12-11'  -- hour of code event period
    GROUP BY user_id
    HAVING uniqExact(day) = 7

),

emails AS (
    
    SELECT verified_primary_email
    FROM hyperskill_private.users
    WHERE dictGetString(
            'hyperskill.alt_cities_country_dict', 'name', toUInt64(country_by_ip_id)
            ) NOT IN ('Russia', 'Belarus')
        AND id IN target_users  -- filter by target users
        AND verified_primary_email != ''
        AND id NOT IN (SELECT * FROM hyperskill.users_is_biased)
                    
)

SELECT *
FROM emails;",
"WITH

-- get all users who clicked on ide or install_ide
result AS (
    
    SELECT DISTINCT user_id
    FROM hyperskill.content
    WHERE date >= today() - toIntervalMonth(1)
        AND action = 'click'
        AND target IN ('ide', 'install_ide')
        AND user_id NOT IN (SELECT * FROM hyperskill.users_is_biased)

)

SELECT *
FROM result;",
"-- https://vyahhi.myjetbrains.com/youtrack/issue/AN-1951/Unload-the-users-who-clicked-on-the-payment-transition

-- Users who clicked on the buttons to go to Checkout
-- We need the country for each user
-- Period: October 11 - October 18

WITH

'2023-10-11' AS start_date,
'2023-10-18' AS end_date,

clicked_on_the_payment_transition AS (

    SELECT
        user_id
    FROM hyperskill.content
    WHERE
        date BETWEEN start_date AND end_date
        AND action = 'click'
        AND page_part = 'subscription_plan'
        AND target IN ('start_premium', 'start_subscription', 'start_your_subscription')
        AND frontend_context = '{""provider"": ""stripe""}'

)

SELECT
    verified_primary_email AS email,
    coalesce(country, first_country) AS country
FROM hyperskill_private.registered_users
WHERE
    is_biased = 0
    AND is_superuser = 0
    AND user_id NOT IN (SELECT user_id FROM hyperskill.users_is_biased)
    AND user_id IN (SELECT user_id FROM clicked_on_the_payment_transition)
    AND email NOT LIKE '%\+%'
    AND email != '';",
"SELECT
    email,
    date_registered
FROM hyperskill_private.users
WHERE
    is_biased = 0
    AND is_superuser = 0
    AND id NOT IN (SELECT user_id FROM hyperskill.users_is_biased)
    AND country NOT IN ('Russia', 'Belarus')
    AND
        (sub_org_str_map != '{}'
             OR sub_org_member_str_map != '{}'
             OR sub_org_trial_str_map != '{}')",
"-- https://vyahhi.myjetbrains.com/youtrack/issue/AN-1927/Dashboard-to-track-Mobile-Premium-DLU


-- Modify the view hyperskill_reports.learning_users: added platform, added new user type – Premium (100% discount)

CREATE OR REPLACE VIEW hyperskill_reports.learning_users
AS

WITH

first_purchase_dates AS (

    SELECT
        hyperskill_user_id AS user_id,
        min(transaction_dt) AS first_paid_transaction_dt
    FROM hyperskill_reports.sales
    WHERE
        amount_usd_cents > 0
        AND product_type IN ('personal', 'premium')
        AND hyperskill_user_id > 0
    GROUP BY
        user_id

),

user_subscriptions AS (

    SELECT

        user_id,
        groupArray(
            (
             -- change subscription start date to actual first payment date
             -- for users who had 100% discount for the first month and then bought subscription
             if(first_paid_transaction_dt > created_at
                    AND first_paid_transaction_dt < valid_till
                    AND date_diff(day, created_at, first_paid_transaction_dt) < 35,
                 first_paid_transaction_dt, created_at),
             valid_till)
        ) AS subscription_dates

    FROM hyperskill_private.stg_subscriptions

    LEFT JOIN first_purchase_dates USING user_id

    WHERE
        type IN ('premium', 'personal')
        AND user_id NOT IN (SELECT user_id FROM hyperskill.users_is_biased)
        AND user_id IN (
            SELECT user_id
            FROM first_purchase_dates
        )
        AND is_enabled = 1
        AND deleted_at IS NULL
        AND users_count > 0

    GROUP BY
        user_id

),

user_activity AS (

    SELECT DISTINCT
        date,
        user_id,
        toDate(if(registration_date < '2001-01-01',
                 dictGetDateTime('hyperskill_private.users_dict', 'date_registered', toUInt64(user_id)),
                 registration_date)) AS registration_date,
        toStartOfWeek(registration_date) AS week_cohort,
        toStartOfMonth(registration_date) AS month_cohort,
        -- Last subscription type on date
        argMax(
            multiIf(
                subscription_type = 'personal', 'Personal',
                subscription_type IN ('team member', 'commercial'), 'Team Member',
                subscription_type = 'freemium', 'Freemium',
                subscription_type = 'premium', 'Premium',
                'Other'
            ) AS tmp_user_type,
            dt) OVER(PARTITION BY (user_id, date)) AS user_type,
        if((dictGetString('hyperskill_reports.dlu_segments_dict', 'first_click_channel', toUInt64(user_id)) AS channel) =
              '', 'Other', channel) AS first_click_channel,
        platform
    FROM hyperskill.content
    WHERE
        date >= today() - 28 * 7
        AND date <= today() - 1
        AND user_id NOT IN (SELECT user_id FROM hyperskill.users_is_biased)
        AND action IN ('failed_submission', 'completed_submission', 'rejected_submission')
        AND step_type != 'text'

),

learning_users AS (

    SELECT
        date,
        user_id,
        registration_date,
        week_cohort,
        month_cohort,
        first_click_channel,
        platform,
        subscription_dates,
        arrayExists(x -> (date BETWEEN toDate(assumeNotNull(x.1)) AND toDate(assumeNotNull(x.2))),
            subscription_dates) AS is_paid_period,
        if(user_type = 'Premium' AND is_paid_period = 0, 'Premium (100% discount)', user_type) AS user_type
    FROM user_activity
    LEFT JOIN user_subscriptions USING user_id

)

SELECT
    date,
    user_id,
    registration_date,
    week_cohort,
    month_cohort,
    user_type,
    first_click_channel,
    platform
FROM learning_users;",
"
-- https://vyahhi.myjetbrains.com/youtrack/issue/AN-1941/Explore-Try-out-projects-for-free-banner

-- I need a table with data to analyze where users are dropping off.
-- How many users
-- * see it
-- * click on it
-- * choose project
-- * complete stage

-- Banner https://hyperskill.org/admin/banners/banner/73/change/
-- Feature https://hyperskill.org/admin/feature_switcher/feature/267/change/


-- ======== TECH RESEARCH ========
-- shown
-- {""action"":""shown"",""route"":""/study-plan"",""part"":""main"",
-- ""target"":""banner"",""context"":{""banner_id"":73},
-- ""user"":527643758,""client_time"":""2023-10-17T10:22:03.446Z"",""screen_size"":1800}
-- +-------------------+---------+------+-----------+---------+------+-----------------+
-- |dt                 |user_id  |action|page       |page_part|target|frontend_context |
-- +-------------------+---------+------+-----------+---------+------+-----------------+
-- |2023-10-17 10:22:08|527643758|shown |/study-plan|main     |banner|{""banner_id"": 73}|
-- +-------------------+---------+------+-----------+---------+------+-----------------+

select
    min(date), -- 2023-08-24
    count(), -- 132365
    uniqExact(user_id) AS users  -- 8560
from hyperskill.content
where
    action = 'shown' and
    page like '/study-plan%' and
    target = 'banner' and
    subscription_type = 'freemium' and
    JSONExtractInt(frontend_context, 'banner_id') = 73;


-- click
--{""action"":""click"",""user"":527643758,""route"":""/study-plan"",""part"":""first_stage_banner"",
-- ""target"":""primary_action"",""context"":null,""client_time"":""2023-10-17T10:23:51.492Z"",""screen_size"":1800}
-- +-------------------+---------+------+-----------+------------------+-------------+----------------+
-- |dt                 |user_id  |action|page       |page_part         |target       |frontend_context|
-- +-------------------+---------+------+-----------+------------------+-------------+----------------+
-- |2023-10-17 10:23:21|527643758|click |/study-plan|first_stage_banner|find_out_more|null            |
-- +-------------------+---------+------+-----------+------------------+-------------+----------------+
-- or
-- {""action"":""click"",""user"":527643758,""route"":""/study-plan"",""part"":""first_stage_banner"",
-- ""target"":""find_out_more"",""context"":null,""client_time"":""2023-10-17T10:25:01.630Z"",""screen_size"":1800}
-- +------+-----------+------------------+--------------+----------------+
-- |action|page       |page_part         |target        |frontend_context|
-- +------+-----------+------------------+--------------+----------------+
-- |click |/study-plan|first_stage_banner|primary_action|null            |
-- +------+-----------+------------------+--------------+----------------+

select
    count(), -- 3253
    uniqExact(user_id), -- 2056
    uniqExactIf(user_id, target = 'primary_action'), -- 1707
    uniqExactIf(user_id, target = 'find_out_more'),  -- 579
    uniqExactIf(user_id, target IN ('primary_action', 'find_out_more'))  -- 2056
from hyperskill.content
where
    date >= '2023-08-24' and
    action = 'click' and
    page like '/study-plan%' and
    subscription_type = 'freemium' and
    page_part = 'first_stage_banner';

-- choose project
-- selected_project is not logged
-- +-------------------+---------+------+---------------------+---------+--------------+----------------+
-- |dt                 |user_id  |action|page                 |page_part|target        |frontend_context|
-- +-------------------+---------+------+---------------------+---------+--------------+----------------+
-- |2023-10-17 10:27:50|527643758|click |/projects/343?track=2|main     |select_project|null            |
-- +-------------------+---------+------+---------------------+---------+--------------+----------------+
-- viewed stage after selecting project
-- +-------------------+---------+------+-----------------------------------+---------+------+----------------+
-- |dt                 |user_id  |action|page                               |page_part|target|frontend_context|
-- +-------------------+---------+------+-----------------------------------+---------+------+----------------+
-- |2023-10-17 10:27:50|527643758|view  |/projects/343/stages/2017/implement|         |      |null            |
-- +-------------------+---------+------+-----------------------------------+---------+------+----------------+
-- or
-- +-------------------+---------+-----------+----+---------+------+----------------+-------------------+----------+--------+------------+
-- |dt                 |user_id  |action     |page|page_part|target|frontend_context|selected_project_id|project_id|stage_id|stage_number|
-- +-------------------+---------+-----------+----+---------+------+----------------+-------------------+----------+--------+------------+
-- |2023-10-17 10:27:45|527643758|viewed_step|    |         |      |{}              |0                  |343       |2017    |1           |
-- +-------------------+---------+-----------+----+---------+------+----------------+-------------------+----------+--------+------------+

select
    count(), -- 7376
    uniqExact(user_id) -- 2866. пользователей больше, чем тех, кто просто кликнул,
from hyperskill.content
where
    date >= '2023-08-24' and
    subscription_type = 'freemium' and
    action = 'viewed_step' and
    project_id > 0 and
    stage_id > 0 and
    stage_number = 1

;

-- complete stage
-- +-------------------+---------+---------------+----+---------+------+----------------+-------------------+----------+--------+------------+
-- |dt                 |user_id  |action         |page|page_part|target|frontend_context|selected_project_id|project_id|stage_id|stage_number|
-- +-------------------+---------+---------------+----+---------+------+----------------+-------------------+----------+--------+------------+
-- |2023-10-17 10:29:08|527643758|completed_stage|    |         |      |{}              |0                  |343       |2017    |1           |
-- +-------------------+---------+---------------+----+---------+------+----------------+-------------------+----------+--------+------------+
select
    count(), -- 1110
    uniqExact(user_id), -- 1004
    uniqExactIf(user_id, platform != 'ide'),  -- 835
    uniqExactIf(user_id, platform = 'ide')  -- 176
from hyperskill.content
where
    date >= '2023-08-24' and
    subscription_type = 'freemium' and
    action = 'completed_stage' and
    project_id > 0 and
    stage_id > 0 and
    stage_number = 1;


-- modal shown
-- +-------------------+---------+-----------+-----------------------------------+---------------------------+------+
-- |dt                 |user_id  |action     |page                               |page_part                  |target|
-- +-------------------+---------+-----------+-----------------------------------+---------------------------+------+
-- |2023-10-17 10:29:15|527643758|modal_shown|/projects/343/stages/2017/implement|completed_first_stage_modal|modal |
-- +-------------------+---------+-----------+-----------------------------------+---------------------------+------+
select
    count(), -- 1004
    uniqExact(user_id) --933
from hyperskill.content
where
    date >= '2023-08-24' and
    subscription_type = 'freemium' and
    action = 'modal_shown' and
    page_part = 'completed_first_stage_modal' and
    target = 'modal';

-- modal click
--{""action"":""modal_hide"",""route"":""/projects/343/stages/2017/implement"",""part"":""completed_first_stage_modal"",""target"":""ok"",
-- ""user"":527643758,""client_time"":""2023-10-17T10:29:37.366Z"",""screen_size"":1800},
-- +-------------------+---------+----------+-----------------------------------+---------------------------+------+----------------+
-- |dt                 |user_id  |action    |page                               |page_part                  |target|frontend_context|
-- +-------------------+---------+----------+-----------------------------------+---------------------------+------+----------------+
-- |2023-10-17 10:29:52|527643758|modal_hide|/projects/343/stages/2017/implement|completed_first_stage_modal|ok    |null            |
-- +-------------------+---------+----------+-----------------------------------+---------------------------+------+----------------+
-- or
-- {""action"":""click"",""user"":527643758,""route"":""/projects/343/stages/2017/implement"",""part"":""completed_first_stage_modal"",
-- ""target"":""copy code and get premium"",""client_time"":""2023-10-17T10:29:37.390Z"",""screen_size"":1800},
-- +-------------------+---------+------+-----------------------------------+---------------------------+-------------------------+----------------+
-- |dt                 |user_id  |action|page                               |page_part                  |target                   |frontend_context|
-- +-------------------+---------+------+-----------------------------------+---------------------------+-------------------------+----------------+
-- |2023-10-17 10:29:52|527643758|click |/projects/343/stages/2017/implement|completed_first_stage_modal|copy code and get premium|null            |
-- |2023-10-17 10:29:52|527643758|click |/projects/343/stages/2017/implement|description                |continue                 |null            |
-- +-------------------+---------+------+-----------------------------------+---------------------------+-------------------------+----------------+

select
    distinct
    subscription_type,
    action,
    target
from hyperskill.content
where
    date >= '2023-08-24' and
    page_part = 'completed_first_stage_modal'
order by
    subscription_type,
    action,
    target;

select
    count(), -- 1084
    uniqExact(user_id), -- 919
    uniqExactIf(user_id, target = 'copy code and get premium'), -- 50
    uniqExactIf(user_id, target = 'ok'), -- 139
    uniqExactIf(user_id, target IN ('ok', 'copy code and get premium')),  -- 139
    uniqExactIf(user_id, target = 'get premium'), -- 80
    uniqExactIf(user_id, target IN ('copy code and get premium', 'get premium')) -- 130
from hyperskill.content
where
    date >= '2023-08-24' and
    subscription_type = 'freemium' and
    action in ('modal_hide', 'click') and
    page_part = 'completed_first_stage_modal';
-- оставить только клики по кнопкам, ведущим на страницу покупки

-- купили с промокодом powerup - таких данных нет -- IbulW6vX
select
    uniqExact(user_id),
    JSON_VALUE(data, '$.discount.coupon.name') as coupon_name,
    JSON_VALUE(data, '$.discount.coupon.id') as coupon_id
    --JSONExtractString(subscription_data, 'discount') as coupon
from hyperskill_mariadb.subscriptions_subscription
where
    type = 'premium' and user_id = 527643758
group by
    coupon_name, coupon_id;



--
-- ======== RESULT QUERY ========

CREATE OR REPLACE VIEW hyperskill_reports.banners__banner_73_first_stage__events

AS

WITH

viewed_banner AS (

    SELECT
        user_id
    FROM hyperskill.content
    WHERE
        date >= '2023-08-24'
        AND subscription_type = 'freemium'
        AND action = 'shown'
        AND page LIKE '/study-plan%'
        AND target = 'banner'
        AND JSONExtractInt(frontend_context, 'banner_id') = 73

),

events AS (

    SELECT
        DISTINCT
        dt,
        user_id,
        action,
        page,
        target,
        page_part,
        multiIf(
            action = 'shown'
                AND target = 'banner', '01 Banner Shown',
            action = 'click'
                AND page_part = 'first_stage_banner', '02 Clicked On Banner',
            action = 'viewed_step', '03 Viewed The First Stage',
            action IN ('failed_submission', 'completed_submission')
                AND stage_number = 1, '04 Tried The First Stage',
            action = 'completed_stage'
                AND stage_number = 1, '05 Completed The First Stage',
            action = 'modal_shown'
                AND page_part = 'completed_first_stage_modal', '06 Viewed Modal After Stage Completion',
            action = 'click'
                AND page_part = 'completed_first_stage_modal'
                AND target IN ('copy code and get premium', 'get premium'), '07 Clicked On Modal Get Premium',
            '00 Bug'
        ) AS event,
        dictGetDateTime('hyperskill.subscribers_dict',
            'first_subscribtion_created_at', (toUInt64(user_id), 'premium')) AS first_premium_subscription_created_at
    FROM hyperskill.content
    WHERE
        date >= '2023-08-24'
        AND subscription_type = 'freemium'
        AND user_id IN viewed_banner
        AND (
            (
                -- banner views
                action = 'shown'
                AND page LIKE '/study-plan%'
                AND target = 'banner'
                AND JSONExtractInt(frontend_context, 'banner_id') = 73
            )
            OR
            (
                -- banner clicks
                action = 'click'
                AND page LIKE '/study-plan%'
                AND page_part = 'first_stage_banner'
            )
            OR
            (
                -- selected project – viewed the stage
                action = 'viewed_step'
                AND project_id > 0
                AND stage_id > 0
                AND stage_number = 1
            )
            OR
            (
                -- tried stage
                action IN ('failed_submission', 'completed_submission')
                AND project_id > 0
                AND stage_id > 0
                AND stage_number = 1
            )
            OR
            (
                -- completed stage
                action = 'completed_stage'
                AND project_id > 0
                AND stage_id > 0
                AND stage_number = 1
            )
            OR
            (
                -- viewed modal after stage completion
                action = 'modal_shown'
                AND page_part = 'completed_first_stage_modal'
                AND target = 'modal'
            )
            OR
            (
                -- clicked on button ""Start subscription""
                action = 'click'
                AND page_part = 'completed_first_stage_modal'
                AND target IN ('copy code and get premium', 'get premium')
            )
        )

    ORDER BY
        user_id,
        date

)

SELECT
    *
FROM events;
",
"-- Reached daily limit in registration day, %, after first track selection.
WITH
today() - 28 * 4 AS start_from_period,
user_first_track_selection AS (
    SELECT
        user_id,
        dictGetDateTime('hyperskill.alt_users_stepikuser_dict', 'date_registered',
                        toUInt64(user_id))                             AS registration_date,
        minIf(dt, action = 'selected_track')                           AS first_track_selection_dt,
        argMinIf(selected_track_id, dt, action = 'selected_track')     AS first_track_selection_id,
        date_diff('hour', first_track_selection_dt, registration_date) AS diff_hours
    FROM hyperskill.content
    WHERE
        date >= start_from_period
        AND registration_date >= start_from_period
        AND action IN ('selected_track')
    GROUP BY user_id, registration_date
             -- drop users who selected track more than 2 hours after or before registration
             -- suspicious users
    HAVING diff_hours BETWEEN -2 AND 2
)
SELECT
    user_id,
    registration_date,
    first_track_selection_dt,
    first_track_selection_id AS track_id,
    dictGetStringOrDefault(
            'hyperskill.tracks_track_dict', 'title', toUInt64(selected_track_id),
            'Track is not exist. Please, call an analyst.'
    ) AS track_title,
    if(
        uniqExactIf(dt, action = 'reached_limit'
            -- if user reached limit in first 24 hours after track selection
            AND dt BETWEEN first_track_selection_dt
                AND first_track_selection_dt + interval 1 day
        ) > 0, 1, 0
    ) AS day_0_limit_reached,
    if(
        uniqExactIf(dt, action = 'completed_step'
            -- if user completed step on next day after track selection
            AND date = toDate(first_track_selection_dt) + interval 1 day
        ) > 0, 1, 0
    ) AS day_1_retained
FROM hyperskill.content
LEFT JOIN user_first_track_selection USING (user_id)
WHERE
    date >= start_from_period - 1
    AND registration_date >= start_from_period
    AND action IN ('registered_user', 'selected_track',
                 'reached_limit', 'completed_step')
GROUP BY
    user_id,
    registration_date,
    first_track_selection_dt,
    track_id,
    selected_track_id
HAVING first_track_selection_dt >= '2021-01-01';


-- First Day Retention - retention in theory or task completion on the next day after registration, after first track selection.
WITH
today() - 28 * 4 AS start_from_period,
user_first_track_selection AS (
    SELECT
        user_id,
        dictGetDateTime('hyperskill.alt_users_stepikuser_dict', 'date_registered',
                        toUInt64(user_id)
        ) AS registration_date,
        minIf(dt, action = 'selected_track') AS first_track_selection_dt,
        argMinIf(selected_track_id, dt, action = 'selected_track') AS first_track_selection_id,
        date_diff('hour', first_track_selection_dt, registration_date) AS diff_hours
    FROM hyperskill.content
    WHERE
        date >= start_from_period
        AND registration_date >= start_from_period
        AND action IN ('selected_track')
    GROUP BY user_id, registration_date
             -- drop users who selected track more than 2 hours after or before registration
             -- suspicious users
    HAVING diff_hours BETWEEN -2 AND 2
)
SELECT
    user_id,
    registration_date,
    first_track_selection_dt,
    first_track_selection_id AS track_id,
    dictGetStringOrDefault(
            'hyperskill.tracks_track_dict', 'title', toUInt64(selected_track_id),
            'Track is not exist. Please, call an analyst.'
    ) AS track_title,
    if(
        uniqExactIf(dt, action = 'reached_limit'
        -- if user reached limit in first 24 hours after track selection
            AND dt BETWEEN first_track_selection_dt
                AND first_track_selection_dt + interval 1 day
        ) > 0, 1, 0
    ) AS day_0_limit_reached,
    if(
        uniqExactIf(dt, action = 'completed_step'
        -- if user completed step on next day after track selection
        AND date = toDate(first_track_selection_dt) + interval 1 day
        ) > 0, 1, 0
    ) AS day_1_retained
FROM hyperskill.content
LEFT JOIN user_first_track_selection USING (user_id)
WHERE
    date >= start_from_period - 1
    AND registration_date >= start_from_period
    AND action IN ('registered_user', 'selected_track',
                   'reached_limit', 'completed_step')
GROUP BY
    user_id,
    registration_date,
    first_track_selection_dt,
    track_id,
    selected_track_id
HAVING first_track_selection_dt >= '2021-01-01'",
"WITH
today() AS some_date,
step_publication_dt AS (
    SELECT
        step_id,
        first_publication_dt,
        step_type

    FROM hyperskill_reports.steps__first_publication_dt

    WHERE is_stage = 0
      AND step_type <> 'text'
),

enabled_alpha_auto_steps AS (
    SELECT
        step_id

    FROM hyperskill.stg_steps

    WHERE
        is_enabled = 1
        AND deleted_at is NULL
        AND readiness IN ('alpha_auto')
        AND status = 1
),

('completed_step', 'failed_submission', 'completed_submission',
'created_like', 'skipped_step', 'viewed_step') AS events_filter,

step_user_stat AS (
    SELECT 
        user_id,
        step_id,
        topic_id,
        minIf(dt,
              action IN ('completed_step', 'failed_submission', 'completed_submission')
        ) AS dt,
        retention(action IN events_filter,
                  action IN ('completed_step', 'failed_submission', 'completed_submission'),
                  action IN ('completed_step', 'completed_submission'),
                  action = 'skipped_step',
                  action = 'created_like' AND like_type != 'skip'
        ) AS actions,
        actions[1]                                                                       AS is_viewed,
        actions[2]                                                                       AS is_tried,
        actions[3]                                                                       AS is_completed,
        actions[4]                                                                       AS is_skipped,
        actions[5]                                                                       AS is_liked,
        countIf(action, action = 'completed_submission')                                 AS completed_submissions,
        countIf(action, action = 'failed_submission')                                    AS failed_submissions,
        anyIf(like_value, action = 'created_like' AND like_type != 'skip')               AS rating,
        anyIf(
            multiIf(
                          like_value = 100, 'hard',
                          like_value = 101, 'easy',
                          like_value = 102, 'boring',
                          ''
            ), action = 'created_like' AND like_type = 'skip'
        )                     AS skip_reason

    FROM hyperskill.content

    WHERE 
        action IN events_filter
        AND (step_id > 0)
        AND (solving_context IN ('', 'default'))
        AND (step_type != 'text')
        AND (is_stage = 0)
        AND step_id IN (SELECT step_id FROM enabled_alpha_auto_steps)
        AND (date >= (some_date - interval 6 month))
        AND (user_id NOT IN (SELECT user_id
                           FROM hyperskill.users_is_biased)
            )

    GROUP BY step_id, user_id, topic_id
),
step_stats AS (
    SELECT 
        step_id,
        topic_id,
        first_publication_dt,
        uniqExact(user_id)                                                       AS viewed_users,
        uniqExactIf(user_id, is_tried)                                           AS tried_users,
        uniqExactIf(user_id, is_tried AND is_completed)                          AS completed_users,

        uniqExactIf(user_id, is_tried AND is_skipped)                            AS tried_and_skipped_users,
        uniqExactIf(user_id, is_tried AND is_skipped AND skip_reason = 'hard')   AS hard_skipped_users,
        uniqExactIf(user_id, is_tried AND is_skipped AND skip_reason = 'boring') AS boring_skipped_users,
        uniqExactIf(user_id, is_tried AND is_skipped AND skip_reason = 'easy')   AS easy_skipped_users,
        tried_and_skipped_users / tried_users                                    AS skip_rate,
        hard_skipped_users / tried_and_skipped_users                             AS hard_skip_rate,

        uniqExactIf(user_id, is_liked)                                           AS liked_users,
        avgIf(rating, is_liked)                                                  AS avg_like,
        countIf(rating, is_liked AND rating IN (-2, -1, 0))                      AS non_positive_like_count,

        sum(completed_submissions)                                               AS completed_subs_count,
        sum(failed_submissions)                                                  AS failed_subs_count,

        tried_users / viewed_users                                               AS tried_rate,
        completed_users / tried_users                                            AS completion_rate,
        completed_subs_count / (completed_subs_count + failed_subs_count)        AS success_rate,

        if(completed_users >= 50 AND liked_users >= 4, 1, 0)                     AS is_reached_enough_users,
        if( -- users tried to solve problem
                        tried_rate > 0.93
                    -- users didn't skip to often, skip for hard reason
                    AND (skip_rate <= 0.1)
                    -- users tried to solve problem and completed it
                    -- (users can complete less, but avg like should be more in such case)
                    AND (completion_rate >= 0.93 OR (completion_rate >= 0.88 AND avg_like > 1.6))
                    -- problem isn't so easy or so hard by submissions
                    AND success_rate BETWEEN 0.1 AND 0.9
                    -- users liked problem
                    AND avg_like > 1.2,
                        1, 0
        )                                                    AS is_good_quality
    FROM step_user_stat
    LEFT JOIN step_publication_dt USING step_id
    WHERE dt > first_publication_dt
    GROUP BY 
        step_id, 
        topic_id, 
        first_publication_dt
)
SELECT *
FROM step_stats
WHERE is_reached_enough_users = 1
  AND is_good_quality = 1;",
"WITH

map(
    '1', 'I have never studied it before',
    '2', 'I have studied it online, but I do not use it professionally',
    '3', 'I study it as part of a school/college/university program',
    '4', 'I have studied it before, and I use it professionally',
    '', 'No Data'
) AS talg_question_1_dict,

map(
    '1', 'I want to apply for my first job that requires skills in what I want to learn',
    '2', 'I want to get better at my current job that requires skills in what I want to learn',
    '3', 'I use a different language/technology and want to change the technology stack',
    '4', 'I want to get better at my job that does not require skills in what I want to learn',
    '5', 'I just find the topic interesting and want to learn it for myself',
    '6', 'I want to see if what I want to learn is right for me',
    '-1', 'Other',
    '', 'No Data'
) AS talg_question_2_dict
SELECT
    dictGetStringOrDefault(
            'hyperskill.tracks_track_dict', 'title', toUInt64(selected_track_id),
            'Track is not exist. Please, call an analyst.'
    )                                      AS track_title,
    talg_question_1_dict[polls.question_1] AS experience,
    talg_question_2_dict[polls.question_2] AS motivation,
    uniqExact(user_id)                     AS answered_users
FROM hyperskill.polls
WHERE poll_id = 4
GROUP BY track_title, experience, motivation
ORDER BY track_title, experience, motivation DESC;",
" -- int_users__first_diagnostics_activity_conversions.sql

WITH

user_diagnostics_dts AS (

    SELECT
        user_id,
        -- TODO: ALT-8702 Add new event `started_diagnostics` in events_event,
        --  hyperskill.content first track_id where user selected diagnostics
        --  on study plan or started diagnostics (viewed diagnostics step)
        argMinIf(
            selected_track_id, dt,
            (
                action = 'click'
                AND page LIKE '%/study-plan%'
                AND frontend_context LIKE '%curriculum personalization%'
            )
            OR (action = 'shown' AND target = 'start_diagnostic')
        ) AS track_id,
        -- first project_id where user selected diagnostics on study plan
        -- or started diagnostics (viewed diagnostics step)
        argMinIf(
            selected_project_id, dt,
            (
                action = 'click'
                AND page LIKE '%/study-plan%'
                AND frontend_context LIKE '%curriculum personalization%'
            )
            OR (action = 'shown' AND target = 'start_diagnostic')
        ) AS project_id,
        dictGetDateTime(
            'hyperskill.alt_users_stepikuser_dict',
            'date_registered',
            user_id
        ) AS registered_dt,
        minIf(
            dt,
            action = 'click'
            AND page LIKE '%/study-plan%'
            AND frontend_context LIKE '%curriculum personalization%'
        ) AS selected_diagnostics_dt,
        minIf(
            dt, (action = 'view' AND page LIKE '%diagnostics/step/%')
            OR (action = 'viewed_step' AND solving_context = 'diagnostic')
            OR (action = 'shown' AND target = 'start_diagnostic')
        ) AS started_diagnostics_dt,
        minIf(
            dt,
            action = 'click'
            AND (
                (page LIKE '%/diagnostics%' AND target = 'skip_diagnostics')
                OR (page = '/diagnostics' AND page_part = 'main' AND target = 'skip') --noqa
            )
        ) AS skipped_diagnostics_dt,
        minIf(
            dt,
            (action = 'view' AND page LIKE '%diagnostics/step/%')
            OR (action = 'viewed_step' AND solving_context = 'diagnostic')
        ) AS viewed_diagnostics_step_dt,
        minIf(
            dt,
            action IN (
                'completed_submission', 'failed_submission',
                'completed_step'
            )
            AND solving_context = 'diagnostic'
        ) AS tried_to_solve_diagnostics_step_dt,
        minIf(
            dt,
            action IN ('completed_submission', 'completed_step')
            AND solving_context = 'diagnostic'
        ) AS completed_diagnostics_step_dt,
        minIf(
            dt,
            page LIKE '%diagnostics/step/%' AND target = 'cant_solve'
        ) AS skipped_diagnostics_step_dt,
        -- we can have action = 'completed_diagnostics' for users who
        -- not started diagnostics ('no experience' in TALG)
        -- or tried to solve 1-3 steps, but didn't complete them
        minIf(dt, action = 'completed_diagnostics') AS completed_diagnostics_dt --noqa

    FROM hyperskill.content

    WHERE
        date >= today() - INTERVAL 6 MONTH
        AND registration_date BETWEEN today() - INTERVAL 6 MONTH
        AND today() - INTERVAL 1 DAY
        AND action IN (
            'click', 'view', 'shown', 'completed_submission', 'failed_submission', --noqa
            'completed_step', 'completed_diagnostics', 'registered_user'
        )
        AND user_id NOT IN (SELECT user_id FROM hyperskill.users_is_biased)

    GROUP BY user_id

    HAVING registered_dt > toDateTime('2017-01-01')

    ORDER BY user_id
),

users_diagnostics_activity AS (

    SELECT
        content.user_id AS user_id,
        -- activity in diagnostics
        uniqExactIf(
            content.step_id,
            content.action IN ('completed_submission', 'failed_submission', 'completed_step') --noqa
            AND content.solving_context = 'diagnostic'
            AND content.selected_track_id = user_diagnostics_dts.track_id
            AND content.selected_project_id = user_diagnostics_dts.project_id
            AND content.dt BETWEEN started_diagnostics_dt AND started_diagnostics_dt + INTERVAL 12 HOUR --noqa
        ) AS tried_to_solve_steps_in_diagnostics_count,
        uniqExactIf(
            content.step_id, content.action IN ('completed_submission', 'completed_step') --noqa
            AND content.solving_context = 'diagnostic'
            AND content.selected_track_id = user_diagnostics_dts.track_id
            AND content.selected_project_id = user_diagnostics_dts.project_id
            AND content. dt BETWEEN started_diagnostics_dt AND started_diagnostics_dt + INTERVAL 12 HOUR --noqa
        ) AS completed_steps_in_diagnostics_count,
        uniqExactIf(
            (splitByString('/diagnostics/step/', content.page)[2] AS skipped_step_id), --noqa
            content.page LIKE '%diagnostics/step/%' AND content.target = 'cant_solve' --noqa
            AND content.selected_track_id = user_diagnostics_dts.track_id --noqa
            AND content.selected_project_id = user_diagnostics_dts.project_id --noqa
            AND content.dt BETWEEN started_diagnostics_dt AND started_diagnostics_dt + INTERVAL 12 HOUR --noqa
        ) AS skipped_steps_in_diagnostics_count

    FROM hyperskill.content AS content

    LEFT JOIN user_diagnostics_dts USING user_id

    WHERE
        content.date >= today() - INTERVAL 6 MONTH
        AND content.registration_date BETWEEN today() - INTERVAL 6 MONTH
        AND today() - INTERVAL 1 DAY
        AND content.action IN
        (
            'shown', 'completed_submission', 'failed_submission',
            'completed_step', 'completed_diagnostics'
        )
        AND user_id NOT IN (SELECT user_id FROM hyperskill.users_is_biased)

    GROUP BY user_id

),

users_diagnostics_conversions AS (

    SELECT
        user_diagnostics_dts.user_id,
        user_diagnostics_dts.track_id,
        user_diagnostics_dts.project_id,
        user_dts.registered_dt AS registered_dt,
        user_dts.selected_diagnostics_dt AS selected_diagnostics_dt,
        user_dts.started_diagnostics_dt AS started_diagnostics_dt,
        user_dts.skipped_diagnostics_dt AS skipped_diagnostics_dt,
        user_dts.viewed_diagnostics_step_dt AS viewed_diagnostics_step_dt,
        user_dts.tried_to_solve_diagnostics_step_dt AS solved_diagnostics_step_dt, --noqa
        user_dts.completed_diagnostics_step_dt AS completed_diagnostics_step_dt,
        user_dts.skipped_diagnostics_step_dt AS skipped_diagnostics_step_dt,
        user_dts.completed_diagnostics_dt AS completed_diagnostics_dt,
        user_act.completed_steps_in_diagnostics_count AS completed_steps_in_diagnostics_count, --noqa
        user_act.skipped_steps_in_diagnostics_count AS skipped_steps_in_diagnostics_count, --noqa
        user_act.tried_to_solve_steps_in_diagnostics_count AS tried_to_solve_steps_in_diagnostics_count, --noqa
        if(
            user_dts.selected_diagnostics_dt
            BETWEEN user_dts.registered_dt AND user_dts.registered_dt + INTERVAL 6 DAY, 1, 0 --noqa
        ) AS is_selected_diagnostics,
        if(
            user_dts.started_diagnostics_dt
            BETWEEN user_dts.registered_dt AND user_dts.registered_dt + INTERVAL 6 DAY, 1, 0 --noqa
        ) AS is_started_diagnostics,
        if(
            user_dts.skipped_diagnostics_dt
            BETWEEN user_dts.started_diagnostics_dt AND user_dts.started_diagnostics_dt + INTERVAL 12 HOUR --noqa
            AND user_dts.started_diagnostics_dt > toDate('2020-01-01'),
            1, 0
        ) AS is_skipped_diagnostics,
        if(
            user_dts.viewed_diagnostics_step_dt
            BETWEEN user_dts.started_diagnostics_dt AND user_dts.started_diagnostics_dt + INTERVAL 12 HOUR --noqa
            AND user_dts.started_diagnostics_dt > toDate('2020-01-01'),
            1, 0
        ) AS is_viewed_diagnostics_step,
        if(
            user_dts.tried_to_solve_diagnostics_step_dt
            BETWEEN user_dts.started_diagnostics_dt AND user_dts.started_diagnostics_dt + INTERVAL 12 HOUR --noqa
            AND user_dts.started_diagnostics_dt > toDate('2020-01-01'),
            1, 0
        ) AS is_tried_to_solve_diagnostics_step,
        if(
            user_dts.completed_diagnostics_step_dt
            BETWEEN user_dts.started_diagnostics_dt AND user_dts.started_diagnostics_dt + INTERVAL 12 HOUR --noqa
            AND user_dts.started_diagnostics_dt > toDate('2020-01-01'),
            1, 0
        ) AS is_completed_diagnostics_step,
        if(
            user_dts.skipped_diagnostics_step_dt
            BETWEEN user_dts.started_diagnostics_dt AND user_dts.started_diagnostics_dt + INTERVAL 12 HOUR --noqa
            AND user_dts.started_diagnostics_dt > toDate('2020-01-01'),
            1, 0
        ) AS is_skipped_diagnostics_step,
        if(
            user_dts.completed_diagnostics_dt
            BETWEEN user_dts.started_diagnostics_dt AND user_dts.started_diagnostics_dt + INTERVAL 12 HOUR --noqa
            AND user_dts.started_diagnostics_dt > toDate('2020-01-01'),
            1, 0
        ) AS is_completed_diagnostics

    FROM user_diagnostics_dts AS user_dts
    LEFT JOIN users_diagnostics_activity AS user_act USING user_id
    WHERE registered_dt > toDateTime('2017-01-01')
)

SELECT *
FROM users_diagnostics_conversions

-- int_users__topics_activity_conversions.sql

-- TODO: update solving_context after ALT-8937 Change `solving_context`
--  filling for actions with topics (events)
SELECT
    user_id,
    selected_track_id AS track_id,
    selected_project_id AS project_id,
    topic_id,
    retention(
        1,
        action = 'skipped_predicted_topic',
        action IN (
            'completed_submission', 'failed_submission', 'completed_step'
        )
        AND solving_context = 'verification',
        action = 'skipped_nonpredicted_topic',
        action IN ('completed_submission', 'failed_submission')
        AND solving_context IN ('default', ''),
        action = 'completed_topic'
        AND solving_context IN ('by_steps', 'default', 'by_stages'),
        action = 'completed_predicted_topic',
        action IN ('viewed_step', 'completed_step') AND step_type = 'text'
    ) AS topic_actions,
    -- user-topic conversions
    -- clicked 'skip' in study plan = skipped topic
    topic_actions[2] AS is_skipped_preskipped_topic,
    -- clicked 'verify to skip' in study plan and send submission
    topic_actions[3] AS is_tried_skip_topic,
    -- clicked 'verify to skip' in study plan and completed step
    -- during 3 attempts - skipped topic through verification
    topic_actions[4] AND is_tried_skip_topic AS is_verified_topic,
    topic_actions[5] AS is_tried_solve_topic_by_steps,
    topic_actions[6]
    AND is_tried_solve_topic_by_steps AS is_completed_topic_by_steps,
    topic_actions[7]
    AND is_tried_solve_topic_by_steps AS is_completed_preskipped_topic_by_steps,
    topic_actions[8] AS is_viewed_theory,
    -- user-topic activity
    minIf(dt, action IN (
        'completed_topic', 'skipped_topic', 'skipped_predicted_topic',
        'skipped_nonpredicted_topic', 'completed_predicted_topic'
    )) AS topic_completion_or_skip_dt,
    minIf(
        dt,
        action IN (
            'completed_submission', 'failed_submission', 'completed_step'
        )
        AND step_type != 'text'
    ) AS topic_first_submission_dt,
    1
    - countIf(
        action = 'completed_submission' AND solving_context IN ('default', '')
    )
    / countIf(
        action IN ('completed_submission', 'failed_submission')
        AND solving_context IN ('default', '')
    ) AS failure_rate_by_steps,
    uniqExactIf(
        step_id, action IN ('completed_step', 'completed_submission')
        AND solving_context IN ('default', '')
        AND step_type != 'text'
    ) AS completed_steps

FROM hyperskill.content

WHERE
    date >= today() - INTERVAL 6 MONTH
    AND registration_date >= today() - INTERVAL 6 MONTH
    AND topic_id > 0
    AND action IN (
        'completed_submission', 'failed_submission', 'completed_step',
        'skipped_topic', 'skipped_predicted_topic', 'completed_topic',
        'skipped_nonpredicted_topic', 'completed_predicted_topic', 'click',
        'viewed_step'
    )
    AND user_id NOT IN (SELECT user_id FROM hyperskill.users_is_biased
    )
    AND selected_track_id > 0
    -- to to filter only those topics and actions that were in study plan
    AND selected_track_id = track_id
    AND selected_project_id = project_id

GROUP BY user_id, topic_id, project_id, track_id

ORDER BY user_id, track_id, project_id, topic_id

-- int_users__topics_unskip_dts__by_track_project_agg.sql

-- for unskip topic in hyperskill.content
-- we have only frontend actions with topic_id = 0,
-- we can calculate only events count
-- (not defined (unique) unskipped topics)
-- so, this metric can be not-accurate

SELECT
    user_id,
    selected_track_id AS track_id,
    selected_project_id AS project_id,
    -- clicked 'unskip' in study plan, topic theory page or knowledge map
    groupArray(dt) AS unskipped_topic_dts

FROM hyperskill.content

WHERE
    date >= today() - INTERVAL 6 MONTH
    AND registration_date >= today() - INTERVAL 6 MONTH
    AND action = 'click'
    -- unskip topic in study plan
    AND (
        (
            page_part = 'stage'
            AND page LIKE '%/study-plan%'
            AND target = 'activity_unskip'
            AND frontend_context LIKE '%learn topic%'
        )
        OR
        -- unskip topic in topic theory page and knowledge map
        (
            target = 'unskip_topic'
            AND page_part IN ('main', 'step_text', 'topic_context_menu')
        )
    )
    AND user_id NOT IN (SELECT user_id FROM hyperskill.users_is_biased)
    AND selected_track_id > 0

GROUP BY user_id, project_id, track_id
ORDER BY user_id

-- ",
"WITH topic_stats AS (SELECT topic_id,
                            uniqExact(user_id)                                     AS completed_step_users,
                            row_number() over (order by completed_step_users DESC) AS topic_rank
                     FROM hyperskill.content
                     WHERE dt >= today() - 28 * 3
                       AND action IN ('completed_submission', 'completed_step')
                       AND topic_id > 0
                       AND step_type != 'text'
                       AND solving_context IN ('', 'default')
                       AND topic_id IN (SELECT topic_id
                                        FROM hyperskill.stg_topics
                                        WHERE is_enabled = 1
                                          AND is_group = 0
                                          AND is_manual_disabled = 0
                                          AND has_steps = 1
                                          AND deleted_at is null)
                     GROUP BY topic_id
                     ORDER BY completed_step_users DESC),
     -- topics count
     max_rank AS (SELECT max(topic_rank) AS topics_count
                  FROM topic_stats)
-- get first 10% rows from topic_stats
SELECT topic_id,
       completed_step_users
FROM topic_stats
WHERE topic_rank <= (SELECT topics_count FROM max_rank) * 0.1;",
"-- days between registration and first premium subscription for new users
SELECT
    median(dateDiff('day', registration_date, date)) AS median,
    avg(dateDiff('day', registration_date, date)) AS avg,
    quantile(0.75)(dateDiff('day', registration_date, date)) AS quantile_75,
    quantile(0.9)(dateDiff('day', registration_date, date)) AS quantile_90
FROM hyperskill.content
WHERE action like '%created_subscription%'
  AND date >= today() - 28 * 3
  AND dt_registered >= today() - 28 * 3
  AND subscription_type = 'premium';",
"-- retention from registratio to next day (24-48 hours) activation, view (vist)
SELECT avg(next_day_retention)      AS next_day_active_retention,
       avg(next_day_view_retention) AS next_day_view_retention
FROM (
         SELECT user_id,
                dictGetDateTime('hyperskill.alt_users_stepikuser_dict',
                                'date_registered',
                                toUInt64(user_id))                                                             AS cohort,
                retention(1, dt BETWEEN dt_registered + interval 24 hour AND dt_registered + interval 48 hour
                    AND action = 'completed_step'
                    AND step_type !='text')[2]                                                                 AS next_day_retention,
                retention(1,
                          dt BETWEEN dt_registered + interval 24 hour AND dt_registered + interval 48 hour)[2] AS next_day_view_retention
         FROM hyperskill.content
         WHERE date >= today() - 28 * 3
           AND dt_registered BETWEEN today() - 28 * 3 AND today() - 1
           AND action IN ('registered_user', 'completed_step', 'viewed_step', 'view')
           AND is_superuser = 0
           AND is_biased = 0
           AND user_id NOT IN (SELECT user_id FROM hyperskill.users_is_biased)
         GROUP BY user_id, cohort
         );",
"-- Active users count for each track for last 3 month, 1 month, 1 month with subscription info
SELECT selected_track_id,
       dictGetString('hyperskill.tracks_track_dict', 'title', toUInt64(selected_track_id)) AS track_title,
       uniqExactIf(user_id, (date >= (now() - toIntervalMonth(3))) AND
                            (date <= now()))                                               AS active_last_3_month,
       uniqExactIf(user_id, (date >= (now() - toIntervalMonth(1))) AND
                            (date <= now()))                                               AS active_last_1_month,
       uniqExactIf(user_id, ((date >= (now() - toIntervalMonth(1))) AND (date <= now())) AND
                            (subscription_type IN ('personal', 'premium')))                AS active_last_1_month_personal_premium,
       uniqExactIf(user_id, ((date >= (now() - toIntervalMonth(1))) AND (date <= now())) AND
                            (subscription_type IN ('free', 'freemium')))                   AS active_last_1_month_free,
       uniqExactIf(user_id, ((date >= (now() - toIntervalMonth(1))) AND (date <= now())) AND
                            (subscription_type = 'trial'))                                 AS active_last_1_month_trial,
       uniqExactIf(user_id, ((date >= (now() - toIntervalMonth(1))) AND (date <= now())) AND
                            (subscription_type = 'organization trial'))                    AS active_last_1_month_org_trial,

       uniqExactIf(user_id, ((date >= (now() - toIntervalMonth(1))) AND (date <= now())) AND
                            (subscription_type IN ('commercial', 'team member')))          AS active_last_1_month_commercial
FROM hyperskill.content
WHERE (date >= (today() - toIntervalMonth(3)))
  AND (action IN
       ('failed_submission', 'completed_submission', 'completed_step', 
        'completed_stage', 'completed_project'))
  AND (step_type != 'text')
  AND (solving_context IN ('', 'default'))
  AND (selected_track_id = track_id)
  AND (user_id NOT IN (SELECT user_id
                       FROM hyperskill.users_is_biased))
  AND (dt_registered > toDateTime(0))
  AND dictGetInt8('hyperskill.tracks__dict', 'is_enabled', toUInt64(track_id))
  AND (user_id > 0)
  AND (track_id > 0)
GROUP BY selected_track_id
ORDER BY active_last_1_month DESC;",
"WITH subs AS (SELECT user_id,
                     valid_till AS sub_valid_till,
                     is_auto_renewal
              FROM hyperskill_private.stg_subscriptions
              WHERE period = 'annual'
                AND type = 'personal'
                AND valid_till BETWEEN '2023-10-01' AND '2023-11-30'
                -- subscription was not closed too early (suspicious subs)
                AND dateDiff('day', start_from, valid_till) > 300
                -- and user has no other subs after
                AND user_id NOT IN (SELECT user_id
                                FROM hyperskill_private.stg_subscriptions
                                WHERE type IN ('personal', 'premium')
                                  AND start_from >= '2023-10-01')
),
     users AS (SELECT user_id,
                      email,
                      selected_track,
                      passed_problems,
                      date_registered,
                      is_active_last_1_month,
                      is_active_last_2_months,
                      is_active_last_3_months,
                      country,
                      is_subscribed_for_marketing
               FROM hyperskill_private.registered_users
               WHERE user_id IN (SELECT user_id FROM subs)
)
SELECT *
FROM subs
         LEFT JOIN users USING user_id
WHERE user_id > 0
ORDER BY sub_valid_till;",
"-- https://vyahhi.myjetbrains.com/youtrack/issue/AN-1828/
-- Measure the effect of reactivation:
-- * How many users reactivated daily?
-- * What is their retention?
-- * How many reactivated users bought subscriptions?


CREATE OR REPLACE VIEW hyperskill_reports.reactivated_users
AS
WITH

toUInt16(28 * 6 - 1) AS calculation_depth_days,
toUInt16(28) AS reactivation_window,

users_submissions AS (

    -- Get users submission dates and define the previous submission date
    SELECT DISTINCT
        user_id,
        registration_date,
        date AS submission_date
    FROM hyperskill.content
    WHERE date > today() - calculation_depth_days - reactivation_window - 1
        AND action IN (
            'rejected_submission',
            'failed_submission',
            'completed_submission'
        )
        AND is_superuser = 0
        AND is_biased = 0
        AND registration_date > toDate('2017-01-01')

    ORDER BY
        user_id, date

),

users_data AS (

    SELECT
        user_id,
        registration_date,
        submission_date,
        any(submission_date)
            OVER(PARTITION BY user_id
                ORDER BY submission_date
                ROWS BETWEEN 1 PRECEDING AND 1 PRECEDING) AS prev_submission_date
    FROM users_submissions

),

reactivation_dates AS (

    -- Get reactivation dates for users – the day when a user returns 
    -- after 28 days since the last submission or registration date
    SELECT
        user_id,
        submission_date AS reactivation_date
    FROM users_data
    WHERE
        submission_date - prev_submission_date > reactivation_window
        AND submission_date - toDate(registration_date) > reactivation_window

),

reactivation_retention AS (

    -- Calculate the retention after reactivation
    SELECT
        user_id,
        any(registration_date) AS registration_date,
        reactivation_date,
        retention(
            1,
            submission_date = reactivation_date + toIntervalDay(1),
            submission_date = reactivation_date + toIntervalDay(7),
            submission_date = reactivation_date + toIntervalDay(14),
            submission_date = reactivation_date + toIntervalDay(21),
            submission_date = reactivation_date + toIntervalDay(35)
        ) AS retentions_by_days,
        retention(
            1,
            submission_date BETWEEN reactivation_date + toIntervalDay(7 * 1 + 1)
                AND reactivation_date + toIntervalDay(7 * 2),
            submission_date BETWEEN reactivation_date + toIntervalDay(7 * 2 + 1)
                AND reactivation_date + toIntervalDay(7 * 3),
            submission_date BETWEEN reactivation_date + toIntervalDay(7 * 3 + 1)
                AND reactivation_date + toIntervalDay(7 * 4),
            submission_date BETWEEN reactivation_date + toIntervalDay(7 * 4 + 1)
                AND reactivation_date + toIntervalDay(7 * 5),
            submission_date BETWEEN reactivation_date + toIntervalDay(7 * 5 + 1)
                AND reactivation_date + toIntervalDay(7 * 6),
            submission_date BETWEEN reactivation_date + toIntervalDay(7 * 6 + 1)
                AND reactivation_date + toIntervalDay(7 * 7),
            submission_date BETWEEN reactivation_date + toIntervalDay(7 * 7 + 1)
                AND reactivation_date + toIntervalDay(7 * 8),
            submission_date BETWEEN reactivation_date + toIntervalDay(7 * 8 + 1)
                AND reactivation_date + toIntervalDay(7 * 9),
            submission_date BETWEEN reactivation_date + toIntervalDay(7 * 9 + 1)
                AND reactivation_date + toIntervalDay(7 * 10),
            submission_date BETWEEN reactivation_date + toIntervalDay(7 * 10 + 1)
                AND reactivation_date + toIntervalDay(7 * 11),
            submission_date BETWEEN reactivation_date + toIntervalDay(7 * 11 + 1)
                AND reactivation_date + toIntervalDay(7 * 12),
            submission_date BETWEEN reactivation_date + toIntervalDay(7 * 12 + 1)
                AND reactivation_date + toIntervalDay(7 * 13)
        ) AS retentioins_weekly
    FROM reactivation_dates
    LEFT JOIN users_submissions USING user_id
    GROUP BY
        user_id, reactivation_date

),

new_subscriptions AS (

    -- Get subscriptions and revenue
    SELECT
        hyperskill_user_id AS user_id,
        min(sub_created_at_min) AS first_subscription_dt,
        sum(amount_usd_cents / 100) AS revenue,
        -- Revenue within the first 10 days after SUBSCRIPTION.
        --     It is not the same as Revenue the first 10 days after REACTIVATION, but assume that equals.
        sumIf(amount_usd_cents / 100,
            transaction_dt BETWEEN toDate(sub_created_at_min)
                AND toDate(sub_created_at_min) + toIntervalDay(10)) AS revenue_10d,
        count() AS purchases
    FROM hyperskill_reports.sales
    WHERE
        product_type IN ('premium', 'personal')
        AND amount_usd_cents != 0
        AND hyperskill_user_id > 0
        -- AND transaction_type IN ('payment', 'charge')
        AND sub_created_at_min > today() - calculation_depth_days - reactivation_window - 1
    GROUP BY
        user_id

),

utm AS (

    -- Get UTM parameters. Attribution model is Last Click Before Purchase
    SELECT
        user_id,
        last_click_channel,
        last_click_utm_source,
        last_click_utm_campaign,
        last_click_utm_medium
    FROM hyperskill_reports.marketing_campaign_report

),

result AS (

    -- Combine all metrics in one mart
    SELECT
        reactivation_retention.user_id AS user_id,
        registration_date,
        reactivation_date,
        toMonday(reactivation_date) AS reactivation_week_cohort,
        retentions_by_days,
        retentioins_weekly,
        first_subscription_dt >= reactivation_date AS is_subscribed_after_reactivation,
        first_subscription_dt BETWEEN reactivation_date
            AND reactivation_date + toIntervalDay(10) AS is_subscribed_after_reactivation_10d,
        if(first_subscription_dt >= reactivation_date, revenue, 0) AS reactivated_revenue,
        if(first_subscription_dt >= reactivation_date, revenue_10d, 0) AS reactivated_revenue_10d,
        if(first_subscription_dt >= reactivation_date, purchases, 0) AS reactivated_purchases,
        last_click_channel,
        last_click_utm_source,
        last_click_utm_campaign,
        last_click_utm_medium
    FROM reactivation_retention
    LEFT JOIN new_subscriptions ON new_subscriptions.user_id = reactivation_retention.user_id
    LEFT JOIN utm ON utm.user_id = reactivation_retention.user_id

)

SELECT
    *
FROM result;",
"WITH

subscriptions AS (

SELECT
    user_id,
    email,
    sub_personal_dts['created_at_min'] AS personal_created_at_min,
--     sub_personal_dts['start_from_max'] AS personal_start_from_max,
--     sub_personal_dts['valid_till_max'] AS personal_valid_till_max,

    sub_premium_dts['created_at_min'] AS premium_created_at_min,
--     sub_premium_dts['start_from_max'] AS premium_start_from_max,
--     sub_premium_dts['valid_till_max'] AS premium_valid_till_max,

    sub_freemium_dts['created_at_min'] AS freemium_created_at_min,
--     sub_freemium_dts['start_from_max'] AS freemium_start_from_max,
--     sub_freemium_dts['valid_till_max'] AS freemium_valid_till_max,

    sub_org_dts,
    date_registered,
    bought_paid_subscription,
    has_valid_paid_subscription,
    sub_created_at_least
FROM hyperskill_private.registered_users
WHERE
    is_biased = 0
    AND is_superuser = 0
    AND user_id NOT IN (SELECT user_id FROM hyperskill.users_is_biased)
    AND country NOT IN ('Russia', 'Belarus')
),

-- 1 файл: почты пользователей,
-- которые хотя бы один раз купили персональную или премиум подписку с 01.01.2023 по 04.06.2023
result_1 AS (

SELECT
    email
FROM subscriptions
WHERE
    personal_created_at_min BETWEEN toDate('2023-01-01') AND toDate('2023-06-04') + 1
    OR premium_created_at_min BETWEEN toDate('2023-01-01') AND toDate('2023-06-04') + 1
    OR user_id IN (SELECT
                        DISTINCT user_id
                    FROM hyperskill_private.stg_subscriptions__hist
                    WHERE
                        start_from BETWEEN toDate('2023-01-01') AND toDate('2023-06-04') + 1
                        AND type IN ('personal', 'premium'))
),

-- 2 файл: почты пользователей, зарегистрировавшихся после 01.01.2023
-- и не имеющих за всё время никакой подписки (ни персональной, ни премиум, ни корпоративной).
-- Исключая пользователей модели Freemium.
result_2 AS (

SELECT
    email
FROM subscriptions
WHERE
    date_registered >= toDate('2023-01-01')
    AND bought_paid_subscription = 0
    AND freemium_created_at_min IS NULL

),

-- 3 файл: почты пользователей, которые сейчас имеют персональную подписку, премиум подписку
-- или корпоративную подписку, или покупали годовую подписку хотя бы раз с 01.01.2022.
result_3 AS (

SELECT
    email
FROM subscriptions
WHERE
    has_valid_paid_subscription = 1
    OR user_id IN (
        SELECT
            user_id
        FROM hyperskill_private.stg_subscriptions__hist
        WHERE
            period = 'annual'
            --AND type = 'personal'
            AND created_at >= toDate('2022-01-01')
    )
)

SELECT
    *
FROM result_1;",
"-- File 1: AN-1648-mvp-rfm-features.sql


-- https://vyahhi.myjetbrains.com/youtrack/issue/AN-1648/MVP-RFM-analysis

-- Features for RFM segmentation.
-- Condition: Users registered last year with personal subscription

-- Needed features:
-- user_id
-- email
-- start date (last purchase)
-- last activity (submission) date
-- Cumulative ltv for each user (revenue)
-- Geo data
-- TALG data

-- Additional features:
-- Used platforms
-- Number of passed problems
-- Number of purchases
-- Number of learning days (days with at least one submission)
-- Number of read emails


-- Dataset with features for RFM segmentation
CREATE OR REPLACE VIEW hyperskill_reports.users_rfm_features AS
WITH
talg_data AS (
    SELECT DISTINCT
        user_id,
        question_1,
        question_2
    FROM hyperskill.polls
    WHERE poll_id = 4
    AND poll = 'tell about yourself'
),

map(
    '1', 'I have no experience, I\'m just starting to learn how to code',
    '2', 'I already have some experience in learning programming',
    '3', 'I am a CS or Software Engineering student/graduate',
    '4', 'I\'ve learned to program before, and now I''m using it professionally',
    '', 'No Data'
) AS talg_question_1_dict,

map(
    '1', 'I want to apply for my first job in programming',
    '2', 'My job requires programming and I want to get better at my current job',
    '3', 'I use a different language/technology and want to change the technology stack',
    '4', 'I want to get better at my non-programming job',
    '5', 'I just want to expand my knowledge / get more practice',
    '6', 'I want to try it out and see if coding is right for me',
    '-1', 'Other',
    '', 'No Data'
) AS talg_question_2_dict,

-- Activity for users registered last year
user_activity AS (
    SELECT
        user_id,
        maxIf(date, action IN ('completed_submission', 'failed_submission')) AS last_submission_date,
        uniqExactIf(date, action IN ('completed_submission', 'failed_submission')) AS learning_days,
        uniqExactIf(step_id, action IN ('completed_submission')) AS passed_problems,
        uniqExactIf(target_id, action = 'read_email_notification') AS read_emails,
        groupUniqArrayIf(platform, platform IN ('web', 'iOS', 'ide', 'Android')) AS platforms,
        length(platforms) AS count_platforms
    FROM hyperskill.content
    WHERE
        user_id NOT IN (SELECT user_id FROM hyperskill.users_is_biased) AND
        --date > today() - 7 * 52 - 1 AND
        --registration_date > today() - 7 * 52 - 1 AND
        action IN ('completed_submission', 'failed_submission', 'read_email_notification')
    GROUP BY
        user_id
),

-- Features for users with personal subscription
user_features AS (
    SELECT
        -- User
        id AS user_id,
        email,
        country,
        talg_question_1_dict[talg_data.question_1] AS talg_experience,
        talg_question_2_dict[talg_data.question_2] AS talg_motivation,
        platforms,

        -- Recency
        last_submission_date,
        date_diff(day, last_submission_date, today()) AS days_since_last_submission,
        sub_personal_dts['created_at_min'] AS first_personal_sub_created_at,
        sub_personal_dts['start_from_max'] AS last_personal_sub_start_from, -- +- equal date of last purchase
        date_diff(day, last_personal_sub_start_from, today()) AS days_since_last_personal_sub_start_from,

        -- Frequency
        user_activity.passed_problems AS passed_problems,
        purchases,
        learning_days,

        -- Monetary
        revenue_usd,

        -- Engagement
        -- We don't have a lot of purchases. It can be used instead of a Monetary
        read_emails,
        count_platforms,
        actual_streak_duration

    FROM hyperskill_private.registered_users
    ANY LEFT JOIN talg_data ON talg_data.user_id = registered_users.id
    ANY LEFT JOIN user_activity ON user_activity.user_id = registered_users.id
    WHERE
        user_id NOT IN (SELECT user_id FROM hyperskill.users_is_biased) AND
        --date_registered > today() - 7 * 52 - 1 AND
      -- Exclude B2B users
        sub_org_dts = '{}' AND
        --last_submission_date >= today() - 365 - 30 AND
        (passed_problems > 0 OR first_personal_sub_created_at IS NOT NULL)
)

SELECT
    *
FROM user_features;


-- File 2: AN-1648-mvp-rfm-segments.sql

-- https://vyahhi.myjetbrains.com/youtrack/issue/AN-1648/MVP-RFM-analysis

-- R - calculate from date of last purchase and last activity
-- F - calculate as a function from ~number of purchase~ number of solved problems and a number of days when user actually learned
-- M - calculate from a total money spent on hyperskill


CREATE OR REPLACE VIEW hyperskill_reports.users_rfm_scores AS
WITH
-- Quantiles for rank customers from 1-3
rfm_quantiles AS (

    SELECT
        quantiles(0.33, 0.66)(days_since_last_submission) AS days_since_last_submission_quantiles,
        quantiles(0.33, 0.66)(days_since_last_personal_sub_start_from) AS days_since_last_personal_sub_start_from_quantiles,
        quantiles(0.33, 0.66)(passed_problems) AS passed_problems_quantiles,
        --quantiles(0.33, 0.66)(purchases) AS purchases_quantiles, -- [1, 1]
        quantiles(0.33, 0.66)(learning_days) AS learning_days_quantiles,
        quantiles(0.33, 0.66)(revenue_usd) AS revenue_usd_quantiles
        --quantiles(0.33, 0.66)(read_emails) AS read_emails_quantiles  -- [0, 2]
        --quantiles(0.33, 0.66)(count_platforms) AS count_platforms_quantiles -- [2, 2]
        --quantiles(0.33, 0.66)(actual_streak_duration) AS actual_streak_duration -- [0, 0]
    FROM hyperskill_reports.users_rfm_features
    WHERE
        -- ranks calculated only on subscribers
        revenue_usd > 0 AND
        first_personal_sub_created_at IS NOT NULL

)

SELECT
    user_id,
    email,
    country,
    talg_experience,
    talg_motivation,

    -- Recency
    last_submission_date,
    days_since_last_submission,
    days_since_last_submission_quantiles,
    arraySum(arrayMap(x -> (x >= days_since_last_submission),
        days_since_last_submission_quantiles)) + 1 AS days_since_last_submission_score,

    last_personal_sub_start_from,
    days_since_last_personal_sub_start_from,
    days_since_last_personal_sub_start_from_quantiles,
    arraySum(arrayMap(x -> (x >= assumeNotNull(days_since_last_personal_sub_start_from)),
        days_since_last_personal_sub_start_from_quantiles)) + 1 AS days_since_last_personal_sub_start_from_score,

    -- Frequency
    passed_problems,
    passed_problems_quantiles,
    arraySum(arrayMap(x -> (x <= passed_problems), passed_problems_quantiles)) + 1 AS passed_problems_score,
    purchases,

    learning_days,
    learning_days_quantiles,
    arraySum(arrayMap(x -> (x <= learning_days), learning_days_quantiles)) + 1 AS learning_days_score,

    -- Monetary
    revenue_usd,
    revenue_usd_quantiles,
    arraySum(arrayMap(x -> (x <= revenue_usd), revenue_usd_quantiles)) + 1 AS revenue_usd_score,

    -- Engagement
    read_emails,
    count_platforms,
    actual_streak_duration,

    -- RFM
    days_since_last_submission_score AS recency,

    multiIf(
        learning_days_score = 1 AND passed_problems_score IN (1, 2), 1,
        learning_days_score = 3 AND passed_problems_score IN (2, 3), 3,
        2
    ) AS frequency,

    revenue_usd_score AS monetary,

    concat(toString(recency), toString(frequency), toString(monetary)) AS rfm_score

FROM hyperskill_reports.users_rfm_features
INNER JOIN rfm_quantiles ON 1 = 1;


-- Statistics for segments
WITH rfm_data AS (
    SELECT
        DISTINCT
        rfm_score,
        uniqExact(user_id) OVER() AS users,
        uniqExact(user_id) OVER(PARTITION BY rfm_score) AS users_in_segment
    FROM hyperskill_reports.users_rfm_scores
)
SELECT
    rfm_score,
    users_in_segment,
    users_in_segment / users * 100 AS percent
FROM rfm_data;


-- recency distribution
WITH rfm_data AS (
    SELECT
        DISTINCT
        recency,
        uniqExact(user_id) OVER() AS users,
        uniqExact(user_id) OVER(PARTITION BY recency) AS users_in_segment
    FROM hyperskill_reports.users_rfm_scores
)
SELECT
    recency,
    users_in_segment,
    users_in_segment / users * 100 AS percent
FROM rfm_data;


-- frequency distribution
WITH rfm_data AS (
    SELECT
        DISTINCT
        frequency,
        uniqExact(user_id) OVER() AS users,
        uniqExact(user_id) OVER(PARTITION BY frequency) AS users_in_segment
    FROM hyperskill_reports.users_rfm_scores
)
SELECT
    frequency,
    users_in_segment,
    users_in_segment / users * 100 AS percent
FROM rfm_data;


-- monetary distribution
WITH rfm_data AS (
    SELECT
        DISTINCT
        monetary,
        uniqExact(user_id) OVER() AS users,
        uniqExact(user_id) OVER(PARTITION BY monetary) AS users_in_segment
    FROM hyperskill_reports.users_rfm_scores
)
SELECT
    monetary,
    users_in_segment,
    users_in_segment / users * 100 AS percent
FROM rfm_data;

",
